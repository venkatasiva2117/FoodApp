//Tables in Food Ordering System
USERS → Stores details of all people using the system such as customers and admins. Includes information like name, username, password, email, phone, role, created date, last login date, and address.
RESTAUREST → Stores details of restaurants available in the system. Includes name, address, phone number, rating, cuisine type, status (active/inactive), estimated delivery time (ETA), admin responsible, and restaurant image.
MENU → Stores details of food items offered by restaurants. Includes item name, description, price, rating, availability status, and item image. Each item is linked to a specific restaurant.
ORDER → Stores information about customer orders. Includes which user placed the order, from which restaurant, order date, total amount, current status (pending, confirmed, delivered, cancelled), and payment mode.
ORDERITEM → Stores details of items included in each order. Includes which order it belongs to, which menu item was ordered, quantity of the item, and total price for that item.

//creating User table..
CREATE TABLE users (
    user_id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(30) NOT NULL,
    username VARCHAR(30) UNIQUE NOT NULL,
    password VARCHAR(20) NOT NULL,
    email VARCHAR(30) UNIQUE NOT NULL,
    phone BIGINT,
    role VARCHAR(15),
    createdDate DATE DEFAULT (CURRENT_DATE),
    lastLoginDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    address VARCHAR(225)
);

Explanation:
user_id INT AUTO_INCREMENT PRIMARY KEY → unique user ID.
username and email marked UNIQUE → avoids duplicates.
password → stored as plain text here, but in real apps you should store hashed passwords.
createdDate DATE DEFAULT (CURRENT_DATE) → auto-fills with today’s date when record is created.
lastLoginDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP → stores last login time and updates automatically.
address VARCHAR(225) → user address.

//Creating Menu table..
CREATE TABLE menu (
    menu_id INT AUTO_INCREMENT PRIMARY KEY,
    restaurantid INT NOT NULL,
    itemName VARCHAR(25) NOT NULL,
    description VARCHAR(225),
    price DECIMAL(10,2) NOT NULL,
    rating DECIMAL(2,1),
    isAvailable ENUM('Available', 'Not Available') DEFAULT 'Available',
    imagePath LONGBLOB
);

Explanation:
menu_id INT AUTO_INCREMENT PRIMARY KEY → unique id for each menu item.
restaurantid INT NOT NULL → links item to a restaurant (can later use FOREIGN KEY).
itemName VARCHAR(25) NOT NULL → food item name.
description VARCHAR(225) → short description of the item.
price DECIMAL(10,2) → price with 2 decimal places.
rating DECIMAL(2,1) → rating like 4.5.
isAvailable ENUM(...) → only allows “Available” or “Not Available”.
imagePath LONGBLOB → to store image data.

//Creating Restaurant table..
CREATE TABLE `restaurant` (
  `restaurantid` int NOT NULL,
  `name` varchar(30) NOT NULL,
  `address` varchar(100) NOT NULL,
  `phone` bigint NOT NULL,
  `rating` decimal(2,1) DEFAULT NULL,
  `cusineType` varchar(50) NOT NULL,
  `isActive` enum('ACTIVE','INACTIVE') NOT NULL DEFAULT 'ACTIVE',
  `eta` int NOT NULL,
  `adminUserId` int DEFAULT NULL,
  `imagePath` longblob NOT NULL,
  PRIMARY KEY (`restaurantid`),
  KEY `adminUserId` (`adminUserId`),
  CONSTRAINT `restaurant_chk_1` CHECK ((`rating` between 0 and 5))
) 

Explanation for restaurant table
restaurantid INT AUTO_INCREMENT PRIMARY KEY → unique restaurant ID, auto-generated by the database.
name VARCHAR(30) NOT NULL → restaurant name (max 30 characters), required field.
address VARCHAR(100) NOT NULL → restaurant address (max 100 characters), required field.
phone BIGINT NOT NULL → restaurant contact number, stored as BIGINT to handle long digits.
rating DECIMAL(2,1) DEFAULT NULL → customer rating (e.g., 4.5). Allowed range enforced between 0 and 5.
cusineType VARCHAR(50) NOT NULL → type of cuisine served (e.g., Indian, Italian), required field.
isActive ENUM('ACTIVE','INACTIVE') NOT NULL DEFAULT 'ACTIVE' → shows restaurant status; only ACTIVE or INACTIVE allowed, default is ACTIVE.
eta INT NOT NULL → estimated delivery time (in minutes), required field.
adminUserId INT DEFAULT NULL → refers to the user_id of the admin managing this restaurant (foreign key from users table).
imagePath LONGBLOB NOT NULL → stores the image/logo of the restaurant in binary format, required field.
CHECK (rating BETWEEN 0 AND 5) → ensures ratings are valid and within range.

//Creating Order table..
CREATE TABLE `order` (
  `order_id` int NOT NULL,
  `user_id` int DEFAULT NULL,
  `restaurantid` int NOT NULL,
  `orderDate` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `totalAmount` decimal(10,2) NOT NULL,
  `status` enum('PENDING','CONFIRMED','DELIVERED','CANCELLED') NOT NULL DEFAULT 'PENDING',
  `paymentmode` enum('CASHONDELIVERY','CREDITCARD','UPI','WALLET') NOT NULL,
  PRIMARY KEY (`order_id`),
  KEY `restaurantid` (`restaurantid`),
  KEY `order_ibfk_1` (`user_id`),
  CONSTRAINT `order_ibfk_1` FOREIGN KEY (`user_id`) REFERENCES `user` (`user_id`),
  CONSTRAINT `order_ibfk_2` FOREIGN KEY (`restaurantid`) REFERENCES `restaurant` (`restaurantid`)
)

Explanation for order table
order_id INT PRIMARY KEY → unique order ID, used to identify each order.
user_id INT DEFAULT NULL → refers to the user who placed the order (foreign key from users table).
restaurantid INT NOT NULL → restaurant from which the order is placed (foreign key from restaurant table).
orderDate TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP → automatically records the date and time when the order was placed.
totalAmount DECIMAL(10,2) NOT NULL → total bill amount for the order, with 2 decimal precision.
status ENUM('PENDING','CONFIRMED','DELIVERED','CANCELLED') NOT NULL DEFAULT 'PENDING' → tracks the current status of the order, default is PENDING.
paymentmode ENUM('CASHONDELIVERY','CREDITCARD','UPI','WALLET') NOT NULL → payment method chosen by the user.
FOREIGN KEY (user_id) REFERENCES users(user_id) → ensures the order must be linked to a valid user.
FOREIGN KEY (restaurantid) REFERENCES restaurant(restaurantid) → ensures the order must be linked to a valid restaurant.

//Creating orderitems table..
CREATE TABLE `orderitem` (
  `orderitemid` int NOT NULL AUTO_INCREMENT,
  `orderid` int NOT NULL,
  `menuid` int NOT NULL,
  `quantity` int NOT NULL,
  `totalPrice` decimal(10,2) NOT NULL,
  PRIMARY KEY (`orderitemid`),
  KEY `orderid` (`orderid`),
  KEY `orderitem_ibfk_2` (`menuid`),
  CONSTRAINT `orderitem_ibfk_1` FOREIGN KEY (`orderid`) REFERENCES `order` (`order_id`),
  CONSTRAINT `orderitem_ibfk_2` FOREIGN KEY (`menuid`) REFERENCES `menu` (`menu_id`)
)

Explanation for orderitem table
orderitemid INT AUTO_INCREMENT PRIMARY KEY → unique ID for each order item, auto-generated by the database.
orderid INT NOT NULL → refers to the order this item belongs to (foreign key from order table).
menuid INT NOT NULL → refers to the menu item (food item) ordered (foreign key from menu table).
quantity INT NOT NULL → number of units of this menu item ordered.
totalPrice DECIMAL(10,2) NOT NULL → total price for this item (quantity × item price).
FOREIGN KEY (orderid) REFERENCES order(order_id) → ensures every item belongs to a valid order.
FOREIGN KEY (menuid) REFERENCES menu(menu_id) → ensures the item is valid and exists in the restaurant menu.


